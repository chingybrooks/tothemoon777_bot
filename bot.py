import os
import requests
import telebot
import schedule
import time
from dotenv import load_dotenv
from datetime import datetime
import logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

bot = telebot.TeleBot(TELEGRAM_TOKEN)

def fetch_crypto_data():
    try:
        url = "https://api.coingecko.com/api/v3/simple/price"
        params = {
            "ids": "bitcoin,ethereum,binancecoin,solana",
            "vs_currencies": "usd",
            "include_24hr_change": "true",
        }
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ: {e}")
        return None

def fetch_market_data():
    fear_greed_url = "https://api.alternative.me/fng/"
    market_data = requests.get(fear_greed_url).json()["data"][0]

    try:
        fear_greed_index = int(market_data["value"])
        btc_dominance = requests.get("https://api.coingecko.com/api/v3/global").json()["data"]["market_cap_percentage"]["btc"]
        altcoin_dominance = 100 - btc_dominance

        return {
            "fear_greed_index": fear_greed_index,
            "btc_dominance": btc_dominance,
            "altcoin_dominance": altcoin_dominance,
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def interpret_fear_greed_index(value):
    """
    –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ –∫—Ä–∞—Ç–∫–æ.
    """
    if 0 <= value <= 24:
        return "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö"
    elif 25 <= value <= 49:
        return "–°—Ç—Ä–∞—Ö"
    elif 50 <= value <= 74:
        return "–ñ–∞–¥–Ω–æ—Å—Ç—å"
    elif 75 <= value <= 100:
        return "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞–¥–Ω–æ—Å—Ç—å"
    else:
        return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"

def create_market_report():
    crypto_data = fetch_crypto_data()
    market_data = fetch_market_data()

    if not crypto_data or not market_data:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞."

    report = "üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞\n\n"
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
    crypto_names = {
        "bitcoin": "BTC",
        "ethereum": "ETH",
        "binancecoin": "BNB",
        "solana": "SOL",
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
    for coin, data in crypto_data.items():
        name = crypto_names.get(coin, coin.upper())  # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        price = data["usd"]
        change = data["usd_24h_change"]
        report += f"- {name}: ${price:,.2f} ({change:+.2f}%)\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
    fear_greed = interpret_fear_greed_index(market_data["fear_greed_index"])
    report += f"\n- –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {market_data['fear_greed_index']} ({fear_greed})\n"
    report += f"- –î–æ–º–∏–Ω–∞—Ü–∏—è BTC: {market_data['btc_dominance']:.2f}%\n"
    report += f"- –î–æ–º–∏–Ω–∞—Ü–∏—è –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤: {market_data['altcoin_dominance']:.2f}%"

    return report

def send_daily_update():
    report = create_market_report()
    if report:
        try:
            bot.send_message(CHANNEL_ID, report)
            logging.info("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
    else:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç. –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ 10:30 –ø–æ UTC+5
schedule.every().day.at("05:30").do(send_daily_update)  # –£—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 10:30 UTC+5

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ 18:30 –ø–æ UTC+5
schedule.every().day.at("13:30").do(send_daily_update)  # –í–µ—á–µ—Ä–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 18:30 UTC+5

@bot.message_handler(commands=['start'])
def handle_start(message):
    send_daily_update()
    bot.reply_to(message, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–ø–æ–≤–µ—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")

@bot.message_handler(commands=['update'])
def handle_update(message):
    report = create_market_report()
    bot.reply_to(message, report)

if __name__ == "__main__":
    while True:
        schedule.run_pending()
        time.sleep(60)
