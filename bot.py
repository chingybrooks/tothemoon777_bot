import os
import requests
import telebot
import schedule
import time
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

bot = telebot.TeleBot(TELEGRAM_TOKEN)

def fetch_crypto_data():
    print("–ó–∞–ø—Ä–æ—Å –∫ API CoinGecko –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö...")
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {
        "ids": "bitcoin,ethereum,binancecoin,solana",  # –£–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        "vs_currencies": "usd",
        "include_24hr_change": "true",
    }
    try:
        response = requests.get(url, params=params)
        print(f"–û—Ç–≤–µ—Ç –æ—Ç API: {response.text}")
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö: {e}")
        return None

def fetch_market_data():
    print("–ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    fear_greed_url = "https://api.alternative.me/fng/"
    market_cap_url = "https://api.coingecko.com/api/v3/global"

    try:
        fear_greed = requests.get(fear_greed_url).json()["data"][0]
        market_data = requests.get(market_cap_url).json()["data"]

        fear_greed_index = int(fear_greed["value"])
        fear_greed_text = "–ñ–∞–¥–Ω–æ—Å—Ç—å" if fear_greed_index >= 50 else "–°—Ç—Ä–∞—Ö"
        market_cap = market_data["total_market_cap"]["usd"]
        btc_dominance = market_data["market_cap_percentage"]["btc"]

        return {
            "fear_greed_index": fear_greed_index,
            "fear_greed_text": fear_greed_text,
            "market_cap": market_cap,
            "btc_dominance": btc_dominance,
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def create_market_report():
    print("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
    crypto_data = fetch_crypto_data()
    market_data = fetch_market_data()

    if not crypto_data or not market_data:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞."

    report = "üìä –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
    for coin, data in crypto_data.items():
        name = coin.upper()
        price = data["usd"]
        change = data["usd_24h_change"]
        report += f"- {name}: ${price:,.2f} ({change:+.2f}%)\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
    report += f"\n- –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä—ã–Ω–∫–∞ ‚âà ${market_data['market_cap']:,.0f}\n"
    report += f"- –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {market_data['fear_greed_index']} ({market_data['fear_greed_text']})\n"
    report += f"- –î–æ–º–∏–Ω–∞—Ü–∏—è BTC: {market_data['btc_dominance']:.2f}%"

    print("–û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤.")
    return report

def send_daily_update():
    print("–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    report = create_market_report()
    if report:
        bot.send_message(CHANNEL_ID, report)
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç—á–µ—Ç –ø—É—Å—Ç–æ–π.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞
# –ó–∏–º–Ω–µ–µ –≤—Ä–µ–º—è (UTC-8)
schedule.every().day.at("21:00").do(send_daily_update)  # –ó–∞–ø—É—Å–∫ –≤ 21:00 –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è

# –õ–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è (UTC-7) - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
# schedule.every().day.at("22:00").do(send_daily_update)  # –ó–∞–ø—É—Å–∫ –≤ 22:00 –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    print("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    send_daily_update()
    bot.reply_to(message, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û–ø–æ–≤–µ—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á
    while True:
        schedule.run_pending()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
